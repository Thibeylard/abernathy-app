// common build.gradle
buildscript {
    repositories {
        mavenCentral()
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:2.2.6.RELEASE")
    }
}

def appModules = subprojects.findAll()

def remoteConfig = appModules.findAll() { project -> project.name != 'configserver'}

def microServices = appModules.findAll() {  project -> (project.name == "patient") }

/** All modules of Mediscreen application **/
configure(appModules) {
    buildscript {
        repositories {
            mavenCentral()
        }
        dependencies {
            classpath("org.springframework.boot:spring-boot-gradle-plugin:2.2.6.RELEASE")
        }
    }

    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: 'java'
    apply plugin: 'war'

    group = 'com.mediscreen'
    version = '0.0.1-SNAPSHOT'
    sourceCompatibility = '13'

    ext {
        set('springCloudVersion', "Hoxton.SR9")
    }

    repositories {
        mavenCentral()
    }

    dependencies {
        providedRuntime 'org.springframework.boot:spring-boot-starter-tomcat'
        testImplementation 'org.assertj:assertj-core:3.17.2'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
        }
    }

    test {
        useJUnitPlatform()
    }

}

/** All modules with remote configuration on config-server **/
configure(remoteConfig) {
    dependencies {
        // Used to keep trying to connect to config server {
        compile 'org.springframework.retry:spring-retry:1.3.1'
        compile 'org.springframework.boot:spring-boot-starter-aop'
        // }

        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.cloud:spring-cloud-starter-config'
    }
}

/** All microservices : application-specific microservices **/
configure(microServices) {

    jar {
        enabled = true
    }

    dependencies {
        // edge microservices related
        implementation 'org.springframework.cloud:spring-cloud-starter-netflix-eureka-client'
        implementation 'org.springframework.cloud:spring-cloud-starter-sleuth'
        implementation 'org.springframework.cloud:spring-cloud-starter-zipkin'

        // spring boot
        implementation 'org.springframework.boot:spring-boot-starter-data-mongodb'
        implementation 'org.springframework.boot:spring-boot-starter-data-rest'
        compile 'org.hibernate.validator:hibernate-validator:6.2.0.Final'

        testImplementation 'de.flapdoodle.embed:de.flapdoodle.embed.mongo'
    }
}